openapi: 3.1.0

info:
  title: Postcrunch
  description: 'A social media platform where we crunch others post and share ours.'
  version: 1.0.0
  contact:
    name: Nguyen Pham
    email: nguyenminhpham24@gmail.com

servers:
  - url: https://github.com/nguyepham
    description: Development server

tags:
  - name: user
    description: Everything about users and accounts.
  - name: newsfeed
    description: CRUD operations with the newsfeed.
  - name: post
    description: CRUD operations with a post.
  - name: comment
    description: CRUD operations with a comment.
  - name: vote
    description: CRUD operations with a vote.
  - name: report
    description: CRUD operations with a report.

paths:
  /api/v1/users:

    put:
      tags:
        - user
      description: Edit user info.
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Update successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/{id}:

    get:
      tags:
        - user
      description: Get a user's details.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - user
      description: Delete an account.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/{id}/posts:

    get:
      tags:
        - post
      description: Get all posts of a user.
      operationId: getPostsByAuthorId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: latest
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/{id}/comments:

    get:
      tags:
        - comment
      description: Get all comments of a user.
      operationId: getCommentsByAuthorId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: latest
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/{id}/votes:

    get:
      tags:
        - vote
      description: Get all votes of a user.
      operationId: getVotesByAuthorId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/{id}/reports:

    get:
      tags:
        - report
      description: Get all reports of a user.
      operationId: getReportsByAuthorId
      parameters:
        - name: id
          in: path
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/content/{id}/comments:

    get:
      tags:
        - comment
      description: Get all comments of a content.
      operationId: getCommentsByTargetId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: latest
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/content/{id}/votes:

    get:
      tags:
        - vote
      description: Get all votes of a content.
      operationId: getVotesByTargetId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/content/{id}/votes/count:

    get:
      tags:
        - vote
      description: Get the number of votes of a content.
      operationId: getNumVotesByTargetId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: There are two elements in this array, one for each type of vote.

        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/content/{id}/reports:

    get:
      tags:
        - report
      description: Get all reports of a content.
      operationId: getReportsByTargetId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/posts:

    post:
      tags:
        - post
      description: Create new post.
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        201:
          description: Create successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - post
      description: Get all posts on the newsfeed.
      operationId: getNewsfeed
      parameters:
        - name: latest
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - post
      description: Edit post info.
      operationId: updatePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: Update successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/post/{id}:

    get:
      tags:
        - post
      description: Get a post's details.
      operationId: getPostById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - post
      description: Delete a post.
      operationId: deletePostById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/comments:

    post:
      tags:
        - comment
      description: Create new comment.
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        201:
          description: Create successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - comment
      description: Edit comment info.
      operationId: updateComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          description: Update successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/comment/{id}:

    get:
      tags:
        - comment
      description: Get a comment's details.
      operationId: getCommentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetch successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - comment
      description: Delete a comment.
      operationId: deleteCommentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/votes:

    post:
      tags:
        - vote
      description: Create new vote.
      operationId: createVote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        201:
          description: Create successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/vote/{id}:

    delete:
      tags:
        - vote
      description: Delete a vote.
      operationId: deleteVoteById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

components:

  responses:
    BadRequest:
      description: There are problems with the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: The requested resources not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:

    AuthorInfo:
      type: object
      description: Info about the author of a content.
      properties:
        id:
          type: string
          description: The author's id.
        username:
          type: string
          description: The account's username used as the default display name.
        firstName:
          type: string
          description: The display name of the author.
        lastName:
          type: string
          description: The display name of the author.

    User:
      type: object
      description: Info about a Postcrunch user.
      properties:
        id:
          type: string
          description: The user's id.
        username:
          type: string
          description: The account's username used as the default display name.
        password:
          type: string
          description: The account's password.
        firstName:
          type: string
          description: The display name of the user.
        lastName:
          type: string
          description: The display name of the user.
        email:
          type: string
          description: The user's email.
          format: email
        dob:
          type: string
          description: The user's birthday.
          format: date-time
        gender:
          type: string
          description: The user's gender.

    Newsfeed:
      type: object
      description: The Postcrunch newsfeed.
      properties:
        posts:
          type: array
          description: The list of posts on the newsfeed.
          items:
            type: string
            description: The id of the post in the list.
        comments:
          type: array
          description: The list of comments on the newsfeed.
          items:
            type: string
            description: The id of the comment in the list.

    Content:
      type: object
      description: A content on the newsfeed (post or comment).
      properties:
        id:
          type: string
          description: The content's id.
        contentType:
          type: string
          description: The type of this content.
          enum:
            - POST
            - COMMENT
        createdAt:
          type: string
          description: The time the content was created.
          format: date-time
        updatedAt:
          type: string
          description: The last time the content was updated.
          format: date-time
        author:
          $ref: '#/components/schemas/AuthorInfo'
        edited:
          type: boolean
        text:
          type: string
          description: The text in the content.
        numUpVotes:
          type: integer
          description: The number of up votes made on the content.
          format: int32
        numDownVotes:
          type: integer
          description: The number of down votes made on the content.
          format: int32
        numComments:
          type: integer
          description: The number of comments made on the content.
          format: int32
        numReports:
          type: integer
          description: The number of reports made on the content.
          format: int32

    Post:
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          description: A Postcrunch post.
          properties:
            title:
              type: string
              description: The title of the post.

    Comment:
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          description: A comment made on a content.
          properties:
            targetId:
              type: string
              description: TODO - Redesign the content models.

    Vote:
      type: object
      description: A vote made on a post.
      required:
        - voteType
        - authorId
        - targetId
      properties:
        id:
          type: string
          description: The vote's id.
        voteType:
          type: string
          description: The type of the vote.
          enum:
            - UP
            - DOWN
        createdAt:
          type: string
          description: The time the voted was created.
          format: date-time
        author:
          $ref: '#/components/schemas/AuthorInfo'
        authorId:
          type: string
          description: The id of the user who created the vote.
        targetId:
          type: string
          description: The id of the targeted content.

    Report:
      type: object
      description: A report made on a post or comment.
      required:
        - author
        - target
      properties:
        id:
          type: string
          description: The report's id.
        reason:
          type: string
          description: The reason for reporting the content.
          enum:
            - SPAM
            - FRAUD
            - INAPPROPRIATE
            - OTHER
        createdAt:
          type: string
          description: The time the report was created.
          format: date-time
        author:
          $ref: '#/components/schemas/AuthorInfo'
        authorId:
          type: string
          description: The id of the user who created the vote.
        targetId:
          type: string
          description: The id of the targeted content.

    NewContent:
      type: object
      required:
        - authorId
      properties:
        createdAt:
          type: string
          description: The time the content was created.
          format: date-time
        authorId:
          type: string
          description: Info about the content's author wrapped in the request.
        text:
          type: string
          description: The text in the content.

    NewPost:
      allOf:
        - $ref: '#/components/schemas/NewContent'
        - type: object
          properties:
            title:
              type: string
              description: The title of the post.

    NewComment:
      allOf:
        - $ref: '#/components/schemas/NewContent'
        - type: object
          properties:
            targetId:
              type: string
              description: Info about the comment's target wrapped in the request.

    ErrorResponse:
      type: object
      description: The response of an invalid HTTP request.
      properties:
        errorCode:
          type: string
          description: An application-specific code of the error.
        message:
          type: string
          description: A human-readable message describing the error.
        httpStatus:
          type: integer
          description: The HTTP status code.
          format: int32
